package minesweeper
import kotlin.random.Random
var hiddenMineField: Array<CharArray> = emptyArray()
var shownMineField: Array<CharArray> = emptyArray()

fun main() {
    println("How many mines do you want on the field?")
    val (w, h) = arrayOf(9, 9)
    var mineCnt: Int = readLine()!!.toInt()
    createMineField(w, h)
    fillMines(w, h, mineCnt)
    fillField(w, h)
    shownMineField = Array(h) { CharArray(w) { '.' } }
    showField(w)
    println("Set/unset mines marks or claim a cell as free:")

    do {
        val (entx, enty, entry) = readLine()!!.split(" ")
        val inputx = entx.toInt() 
        val inputy = enty.toInt()
        when (entry) {
            "mine" -> {
                when (shownMineField[inputy - 1][inputx - 1]) {
                    '*' -> {
                        shownMineField[inputy - 1][inputx - 1] = '.'
                        if (hiddenMineField[inputy - 1][inputx - 1] == 'X') mineCnt += 1
                    }
                    '.' -> {
                        shownMineField[inputy - 1][inputx - 1] = '*'
                        if (hiddenMineField[inputy - 1][inputx - 1] == 'X') mineCnt -= 1
                        if (mineCnt == 0) { 
                            showField(w)
                            println("Congratulations! You found all the mines!")
                            return 
                        }
                    }
                    else -> shownMineField[inputy - 1][inputx - 1] = '*'
                }
            }
            "free" -> {
                when {
                    hiddenMineField[inputy - 1][inputx - 1] == 'X' -> {
                        shownMineField = hiddenMineField
                        showField(w)
                        println("You stepped on a mine and failed!")
                        return 
                    }
                    hiddenMineField[inputy - 1][inputx - 1].isDigit() -> {
                        shownMineField[inputy - 1][inputx - 1] = hiddenMineField[inputy - 1][inputx - 1]
                    }
                }
            }
            else -> return
        }
        showField(w)
        println("Set/unset mines marks or claim a cell as free:")
    } while (true) 
}
fun createMineField(width: Int, height: Int) { hiddenMineField = Array(height) { CharArray(width) { '/' } } }
fun fillMines(width: Int, height: Int, minesCount: Int){
    for (k in 0 until minesCount) {
        do {
            var isMinePlaced = false
            val x = Random.nextInt(0, width)
            val y = Random.nextInt(0, height)
            if (hiddenMineField[y][x] == '/') {
                hiddenMineField[y][x] = 'X'
                isMinePlaced = true
            }
        } while (!isMinePlaced)
    }
}
fun fillField(w: Int, h: Int) {
    for (y in 0 until h) {
        for (x in 0 until w) {
            if (x < w - 1 && hiddenMineField[y][x + 1] == 'X') putNum(y, x) //sağ 
            if (x > 0 && hiddenMineField[y][x - 1] == 'X') putNum(y, x) //sol
			if (y < h - 1 && hiddenMineField[y + 1][x] == 'X') putNum(y, x) //aşağı
    		if (y > 0 && hiddenMineField[y - 1][x] == 'X') putNum(y, x) //yukarı
            if (x < w - 1 && y < h - 1 && hiddenMineField[y + 1][x + 1] == 'X') putNum(y, x) //sağ aşağı
            if (x < w - 1 && y > 0 && hiddenMineField[y - 1][x + 1] == 'X') putNum(y, x) //sağ yukarı 
            if (x > 0 && y > 0 && hiddenMineField[y - 1][x - 1] == 'X') putNum(y, x) //sol yukarı
            if (x > 0 && y < h - 1 && hiddenMineField[y + 1][x - 1] == 'X') putNum(y, x) //sol aşağı
        }
    }
}
fun putNum(y:Int, x: Int) {
    if (hiddenMineField[y][x] == '/') hiddenMineField[y][x] = '1'
    else if (hiddenMineField[y][x].isDigit()) hiddenMineField[y][x]++
}
fun showField(w: Int = 9) {
    print(" |")
    for (i in 1..w) if (i < w) print("$i") else print("$i|\n")
    print("—|")
    for (i in 1..w) if (i < w) print("—") else print("—|\n")
    var cnt = 1 
    shownMineField.forEach { println("$cnt|" + it.joinToString("") + "|"); cnt++ }
    print("—|")
    for (i in 1..w) if (i < w) print("—") else print("—|\n")
}
